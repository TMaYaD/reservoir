// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

// SwaggerJSON embedded version of the swagger document used at generation time
var SwaggerJSON json.RawMessage

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Reservoir is a resource manager with support for wildcards",
    "title": "Reservoir",
    "termsOfService": "http://lexent.bio/terms/",
    "contact": {
      "email": "schandra@lexenbio.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "reservoir.lexent.bio",
  "basePath": "/api/v1",
  "paths": {
    "/claim": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "claim"
        ],
        "summary": "Place a claim for a given name",
        "operationId": "claimResource",
        "parameters": [
          {
            "description": "make claim with a given name",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Claim"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Claim"
            }
          },
          "400": {
            "description": "Invalid Claim"
          }
        }
      },
      "delete": {
        "description": "name should match previously claimed resource",
        "produces": [
          "application/json"
        ],
        "tags": [
          "claim"
        ],
        "summary": "Release claimed resources",
        "operationId": "releaseClaim",
        "parameters": [
          {
            "description": "make claim with a given name",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Claim"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid count supplied"
          },
          "404": {
            "description": "resource not found"
          }
        }
      }
    },
    "/claim/{name}": {
      "get": {
        "description": "name should be an fqdn and match one of the predefined resource templates.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "claim"
        ],
        "summary": "Find claim by name",
        "operationId": "getClaim",
        "parameters": [
          {
            "type": "string",
            "description": "name of the claimed resource",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Claim"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/resource": {
      "get": {
        "tags": [
          "resource"
        ],
        "summary": "List all defined resources and their claims",
        "operationId": "listResources",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Resource"
              }
            }
          }
        }
      },
      "put": {
        "description": "This will create the resource if it doesn't exist.",
        "tags": [
          "resource"
        ],
        "summary": "Set value for a resource",
        "operationId": "setResource",
        "parameters": [
          {
            "description": "Resource object that needs to be set.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "post": {
        "description": "This increments the total count if the resource with the given name already exists.",
        "tags": [
          "resource"
        ],
        "summary": "Add a new resource",
        "operationId": "addResource",
        "parameters": [
          {
            "description": "Resource object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/resource/{template}": {
      "get": {
        "description": "Returns a single resource",
        "produces": [
          "application/json"
        ],
        "tags": [
          "resource"
        ],
        "summary": "Find resource by template",
        "operationId": "getResource",
        "parameters": [
          {
            "type": "string",
            "description": "template of resource to return",
            "name": "template",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "resource"
        ],
        "summary": "Updates a resource with form data",
        "operationId": "updateResourceWithForm",
        "parameters": [
          {
            "type": "string",
            "description": "template of resource that needs to be updated",
            "name": "template",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Updated total of the resource",
            "name": "total",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "resource"
        ],
        "summary": "Deletes a resource",
        "operationId": "deleteResource",
        "parameters": [
          {
            "type": "string",
            "description": "template for resource to delete",
            "name": "template",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "resource not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Claim": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "claimed": {
          "type": "integer",
          "format": "int64",
          "default": 1
        },
        "name": {
          "type": "string"
        },
        "resource": {
          "type": "object"
        }
      },
      "xml": {
        "name": "Claim"
      }
    },
    "Resource": {
      "type": "object",
      "required": [
        "template",
        "total"
      ],
      "properties": {
        "claims": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Claim"
          }
        },
        "template": {
          "description": "Resource name",
          "type": "string"
        },
        "total": {
          "type": "integer",
          "format": "int32"
        }
      },
      "xml": {
        "name": "Resource"
      }
    }
  },
  "tags": [
    {
      "description": "Define resources",
      "name": "resource"
    },
    {
      "description": "Claim a predefined resource",
      "name": "claim"
    }
  ]
}`))
}
