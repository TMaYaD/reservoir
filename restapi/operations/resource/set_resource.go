// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SetResourceHandlerFunc turns a function with the right signature into a set resource handler
type SetResourceHandlerFunc func(SetResourceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SetResourceHandlerFunc) Handle(params SetResourceParams) middleware.Responder {
	return fn(params)
}

// SetResourceHandler interface for that can handle valid set resource params
type SetResourceHandler interface {
	Handle(SetResourceParams) middleware.Responder
}

// NewSetResource creates a new http.Handler for the set resource operation
func NewSetResource(ctx *middleware.Context, handler SetResourceHandler) *SetResource {
	return &SetResource{Context: ctx, Handler: handler}
}

/*SetResource swagger:route PUT /resource resource setResource

Set value for a resource

This will create the resource if it doesn't exist.

*/
type SetResource struct {
	Context *middleware.Context
	Handler SetResourceHandler
}

func (o *SetResource) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSetResourceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
