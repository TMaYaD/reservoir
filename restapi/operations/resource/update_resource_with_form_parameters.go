// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateResourceWithFormParams creates a new UpdateResourceWithFormParams object
// with the default values initialized.
func NewUpdateResourceWithFormParams() UpdateResourceWithFormParams {
	var ()
	return UpdateResourceWithFormParams{}
}

// UpdateResourceWithFormParams contains all the bound params for the update resource with form operation
// typically these are obtained from a http.Request
//
// swagger:parameters updateResourceWithForm
type UpdateResourceWithFormParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*template of resource that needs to be updated
	  Required: true
	  In: path
	*/
	Template string
	/*Updated total of the resource
	  Required: true
	  In: formData
	*/
	Total int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *UpdateResourceWithFormParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return err
		} else if err := r.ParseForm(); err != nil {
			return err
		}
	}
	fds := runtime.Values(r.Form)

	rTemplate, rhkTemplate, _ := route.Params.GetOK("template")
	if err := o.bindTemplate(rTemplate, rhkTemplate, route.Formats); err != nil {
		res = append(res, err)
	}

	fdTotal, fdhkTotal, _ := fds.GetOK("total")
	if err := o.bindTotal(fdTotal, fdhkTotal, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateResourceWithFormParams) bindTemplate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.Template = raw

	return nil
}

func (o *UpdateResourceWithFormParams) bindTotal(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("total", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("total", "formData", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("total", "formData", "int64", raw)
	}
	o.Total = value

	return nil
}
