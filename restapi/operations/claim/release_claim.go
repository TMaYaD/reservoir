// Code generated by go-swagger; DO NOT EDIT.

package claim

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ReleaseClaimHandlerFunc turns a function with the right signature into a release claim handler
type ReleaseClaimHandlerFunc func(ReleaseClaimParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReleaseClaimHandlerFunc) Handle(params ReleaseClaimParams) middleware.Responder {
	return fn(params)
}

// ReleaseClaimHandler interface for that can handle valid release claim params
type ReleaseClaimHandler interface {
	Handle(ReleaseClaimParams) middleware.Responder
}

// NewReleaseClaim creates a new http.Handler for the release claim operation
func NewReleaseClaim(ctx *middleware.Context, handler ReleaseClaimHandler) *ReleaseClaim {
	return &ReleaseClaim{Context: ctx, Handler: handler}
}

/*ReleaseClaim swagger:route DELETE /claim claim releaseClaim

Release claimed resources

name should match previously claimed resource

*/
type ReleaseClaim struct {
	Context *middleware.Context
	Handler ReleaseClaimHandler
}

func (o *ReleaseClaim) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReleaseClaimParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
