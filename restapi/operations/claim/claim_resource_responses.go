// Code generated by go-swagger; DO NOT EDIT.

package claim

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/TMaYaD/reservoir/models"
)

// ClaimResourceOKCode is the HTTP code returned for type ClaimResourceOK
const ClaimResourceOKCode int = 200

/*ClaimResourceOK successful operation

swagger:response claimResourceOK
*/
type ClaimResourceOK struct {

	/*
	  In: Body
	*/
	Payload *models.Claim `json:"body,omitempty"`
}

// NewClaimResourceOK creates ClaimResourceOK with default headers values
func NewClaimResourceOK() *ClaimResourceOK {
	return &ClaimResourceOK{}
}

// WithPayload adds the payload to the claim resource o k response
func (o *ClaimResourceOK) WithPayload(payload *models.Claim) *ClaimResourceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the claim resource o k response
func (o *ClaimResourceOK) SetPayload(payload *models.Claim) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClaimResourceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ClaimResourceBadRequestCode is the HTTP code returned for type ClaimResourceBadRequest
const ClaimResourceBadRequestCode int = 400

/*ClaimResourceBadRequest Invalid Claim

swagger:response claimResourceBadRequest
*/
type ClaimResourceBadRequest struct {
}

// NewClaimResourceBadRequest creates ClaimResourceBadRequest with default headers values
func NewClaimResourceBadRequest() *ClaimResourceBadRequest {
	return &ClaimResourceBadRequest{}
}

// WriteResponse to the client
func (o *ClaimResourceBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}
